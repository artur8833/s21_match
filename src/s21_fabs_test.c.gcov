        -:    0:Source:unit_tests/s21_fabs_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        1:    3:START_TEST(fabsTest1) {
        1:    4:  double testValue1 = -5.503;
        1:    5:  double testValue2 = 5.0;
        1:    6:  double testValue3 = 0;
       1*:    7:  ck_assert_ldouble_eq(s21_fabs(testValue1), fabs(testValue1));
       1*:    8:  ck_assert_ldouble_eq(s21_fabs(testValue2), fabs(testValue2));
       1*:    9:  ck_assert_ldouble_eq(s21_fabs(testValue3), fabs(testValue3));
        1:   10:}
        -:   11:END_TEST
        -:   12:
        1:   13:START_TEST(fabsTest2) {
        1:   14:  double testValue1 = -10.45934;
        1:   15:  double testValue2 = 10.1;
        1:   16:  double testValue3 = 0.0;
       1*:   17:  ck_assert_ldouble_eq(s21_fabs(testValue1), fabs(testValue1));
       1*:   18:  ck_assert_ldouble_eq(s21_fabs(testValue2), fabs(testValue2));
       1*:   19:  ck_assert_ldouble_eq(s21_fabs(testValue3), fabs(testValue3));
       1*:   20:  ck_assert(S21_IS_NAN(s21_fabs(NAN)) == S21_IS_NAN(fabs(NAN)));
       1*:   21:  ck_assert(S21_IS_NAN(s21_fabs(INFINITY)) == S21_IS_NAN(fabs(INFINITY)));
        1:   22:}
        -:   23:END_TEST
        -:   24:
       36:   25:Suite *fabsTest(void) {
       36:   26:  Suite *s = suite_create("\033[45mFabs test\033[0m");
       36:   27:  TCase *tc = tcase_create("Fabs test");
        -:   28:
       36:   29:  tcase_add_test(tc, fabsTest1);
       36:   30:  tcase_add_test(tc, fabsTest2);
        -:   31:
       36:   32:  suite_add_tcase(s, tc);
       36:   33:  return s;
        -:   34:}
