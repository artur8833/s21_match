        -:    0:Source:unit_tests/s21_ceil_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        2:    3:START_TEST(ceilTest1) {
        2:    4:  double testValue1 = -5.7;
        2:    5:  double testValue2 = -0.1;
        2:    6:  double testValue3 = 12.4;
       2*:    7:  ck_assert_ldouble_eq_tol(s21_ceil(testValue1), ceil(testValue1), 1e-6);
       2*:    8:  ck_assert_ldouble_eq_tol(s21_ceil(testValue2), ceil(testValue2), 1e-6);
       2*:    9:  ck_assert_ldouble_eq_tol(s21_ceil(testValue3), ceil(testValue3), 1e-6);
      406:   10:  for (double i = -1.01; i <= 1.01; i += 0.01) {
     404*:   11:    ck_assert_ldouble_eq_tol(s21_ceil(i), ceil(i), 1e-6);
        -:   12:  }
        2:   13:}
        -:   14:END_TEST;
        -:   15:
        2:   16:START_TEST(ceilTest2) {
        2:   17:  double testValue1 = S21_INF_POSITIVE;
        2:   18:  double testValue2 = S21_INF_NEGATIVE;
        2:   19:  double testValue3 = S21_NAN;
       2*:   20:  ck_assert_double_infinite(s21_ceil(testValue1));
       2*:   21:  ck_assert_double_infinite(s21_ceil(testValue2));
       2*:   22:  ck_assert_double_nan(s21_ceil(testValue3));
        2:   23:}
        -:   24:END_TEST;
        -:   25:
       72:   26:Suite *ceilTest(void) {
       72:   27:  Suite *s = suite_create("\033[45mCeil test\033[0m");
       72:   28:  TCase *tc = tcase_create("Ceil test");
        -:   29:
       72:   30:  tcase_add_test(tc, ceilTest1);
       72:   31:  tcase_add_test(tc, ceilTest2);
        -:   32:
       72:   33:  suite_add_tcase(s, tc);
       72:   34:  return s;
        -:   35:}
