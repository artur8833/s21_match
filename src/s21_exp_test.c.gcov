        -:    0:Source:unit_tests/s21_exp_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        1:    3:START_TEST(expTest1) {
        1:    4:  double testValue1 = -5;
        1:    5:  double testValue2 = 5;
        1:    6:  double testValue3 = 0.1;
       1*:    7:  ck_assert_ldouble_eq_tol(s21_exp(testValue1), exp(testValue1), 1e-6);
       1*:    8:  ck_assert_ldouble_eq_tol(s21_exp(testValue2), exp(testValue2), 1e-6);
       1*:    9:  ck_assert_ldouble_eq_tol(s21_exp(testValue3), exp(testValue3), 1e-6);
        1:   10:}
        -:   11:END_TEST
        -:   12:
        1:   13:START_TEST(expTest2) {
        1:   14:  double testValue1 = 243757437;
        1:   15:  double testValue2 = -24.4353425;
        1:   16:  double testValue3 = 0.0;
      401:   17:  for (double i = -20.0; i <= 20.00; i += 0.1) {
     400*:   18:    ck_assert_ldouble_eq_tol(s21_exp(i), exp(i), 1e-6);
        -:   19:  }
       1*:   20:  ck_assert_float_infinite(s21_exp(testValue1));
       1*:   21:  ck_assert_ldouble_eq_tol(s21_exp(testValue2), exp(testValue2), 1e-6);
       1*:   22:  ck_assert_ldouble_eq_tol(s21_exp(testValue3), exp(testValue3), 1e-6);
       1*:   23:  ck_assert_ldouble_eq_tol(s21_exp(testValue2), exp(testValue2), 1e-6);
       1*:   24:  ck_assert_float_infinite(s21_exp(S21_INF_POSITIVE));
       1*:   25:  ck_assert_ldouble_eq(s21_exp(S21_INF_NEGATIVE), 0.0);
       1*:   26:  ck_assert_ldouble_nan(s21_exp(S21_NAN));
       1*:   27:  ck_assert_ldouble_nan(s21_exp(-S21_NAN));
        1:   28:}
        -:   29:END_TEST
        -:   30:
       36:   31:Suite *expTest(void) {
       36:   32:  Suite *s = suite_create("\033[45mExp test\033[0m");
       36:   33:  TCase *tc = tcase_create("Exp test");
        -:   34:
       36:   35:  tcase_add_test(tc, expTest1);
       36:   36:  tcase_add_test(tc, expTest2);
        -:   37:
       36:   38:  suite_add_tcase(s, tc);
       36:   39:  return s;
        -:   40:}
