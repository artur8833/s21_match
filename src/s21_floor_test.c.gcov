        -:    0:Source:unit_tests/s21_floor_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        1:    3:START_TEST(floorTest1) {
        1:    4:  double testValue1 = -5.7;
        1:    5:  double testValue2 = 5.1;
        1:    6:  double testValue3 = 12.4;
       1*:    7:  ck_assert_ldouble_eq_tol(s21_floor(testValue1), floor(testValue1), 1e-6);
       1*:    8:  ck_assert_ldouble_eq_tol(s21_floor(testValue2), floor(testValue2), 1e-6);
       1*:    9:  ck_assert_ldouble_eq_tol(s21_floor(testValue3), floor(testValue3), 1e-6);
      303:   10:  for (double i = -2.01; i <= 1.01; i += 0.01) {
     302*:   11:    ck_assert_ldouble_eq_tol(s21_floor(i), floor(i), 1e-6);
        -:   12:  }
        1:   13:}
        -:   14:END_TEST
        -:   15:
        1:   16:START_TEST(floorTest2) {
        1:   17:  double testValue3 = S21_NAN;
       1*:   18:  ck_assert_double_nan(s21_floor(testValue3));
       1*:   19:  ck_assert(S21_IS_NAN(s21_floor(INFINITY)) == S21_IS_NAN(floor(INFINITY)));
       1*:   20:  ck_assert(S21_IS_NAN(s21_floor(-INFINITY)) == S21_IS_NAN(floor(-INFINITY)));
        1:   21:}
        -:   22:END_TEST
        -:   23:
       36:   24:Suite *floorTest(void) {
       36:   25:  Suite *s = suite_create("\033[45mFloor test\033[0m");
       36:   26:  TCase *tc = tcase_create("Floor test");
        -:   27:
       36:   28:  tcase_add_test(tc, floorTest1);
       36:   29:  tcase_add_test(tc, floorTest2);
        -:   30:
       36:   31:  suite_add_tcase(s, tc);
       36:   32:  return s;
        -:   33:}
