        -:    0:Source:unit_tests/s21_sqrt_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        1:    3:START_TEST(sqrtTest1) {
        1:    4:  double testValue1 = 256;
        1:    5:  double testValue2 = 25;
        1:    6:  double testValue3 = 0;
       1*:    7:  ck_assert_ldouble_eq_tol(s21_sqrt(testValue1), sqrt(testValue1), 1e-6);
       1*:    8:  ck_assert_ldouble_eq_tol(s21_sqrt(testValue2), sqrt(testValue2), 1e-6);
       1*:    9:  ck_assert_ldouble_eq_tol(s21_sqrt(testValue3), sqrt(testValue3), 1e-6);
        1:   10:}
        -:   11:END_TEST
        -:   12:
        1:   13:START_TEST(sqrtTest2) {
        1:   14:  double testValue1 = -1;
        1:   15:  double testValue2 = 1e10;
        1:   16:  double testValue3 = 0.01;
        1:   17:  double testValue4 = -25.01;
       1*:   18:  ck_assert_double_nan(s21_sqrt(testValue1));
       1*:   19:  ck_assert_ldouble_eq_tol(s21_sqrt(testValue2), sqrt(testValue2), 1e-6);
       1*:   20:  ck_assert_ldouble_eq_tol(s21_sqrt(testValue3), sqrt(testValue3), 1e-6);
       1*:   21:  ck_assert(S21_IS_NAN(s21_sqrt(testValue4)) == S21_IS_NAN(sqrt(testValue4)));
       1*:   22:  ck_assert(S21_IS_NAN(s21_sqrt(NAN)) == S21_IS_NAN(sqrt(NAN)));
       1*:   23:  ck_assert(S21_IS_NAN(s21_sqrt(0)) == S21_IS_NAN(sqrt(0)));
       1*:   24:  ck_assert(S21_IS_NAN(s21_sqrt(-0.0)) == S21_IS_NAN(sqrt(-0.0)));
       1*:   25:  ck_assert(S21_IS_NAN(s21_sqrt(INFINITY)) == S21_IS_NAN(sqrt(INFINITY)));
        1:   26:}
        -:   27:END_TEST
        -:   28:
       36:   29:Suite *sqrtTest(void) {
       36:   30:  Suite *s = suite_create("\033[45mSqrt test\033[0m");
       36:   31:  TCase *tc = tcase_create("Sqrt test");
        -:   32:
       36:   33:  tcase_add_test(tc, sqrtTest1);
       36:   34:  tcase_add_test(tc, sqrtTest2);
       36:   35:  suite_add_tcase(s, tc);
       36:   36:  return s;
        -:   37:}
