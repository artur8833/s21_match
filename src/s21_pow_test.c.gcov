        -:    0:Source:unit_tests/s21_pow_test.c
        -:    1:#include "s21_test.h"
        -:    2:
        1:    3:START_TEST(powTest1) {
        1:    4:  double base = 2.432434;
        1:    5:  double exp = 343124.14;
       1*:    6:  ck_assert_double_eq(s21_pow(base, exp), pow(base, exp));
        1:    7:}
        -:    8:END_TEST;
        -:    9:
        1:   10:START_TEST(powTest2) {
        1:   11:  double base = 525;
        1:   12:  double exp = 12;
       1*:   13:  ck_assert_int_eq(s21_pow(base, exp), pow(base, exp));
        1:   14:}
        -:   15:END_TEST;
        -:   16:
        1:   17:START_TEST(powTest3) {
        1:   18:  double base = S21_NAN;
        1:   19:  double exp = 3;
        -:   20:
       1*:   21:  ck_assert_int_eq(s21_pow(base, exp), pow(base, exp));
        1:   22:}
        -:   23:END_TEST;
        -:   24:
        1:   25:START_TEST(powTest4) {
        1:   26:  double base = 2.432523;
        1:   27:  double exp = S21_NAN;
        -:   28:
       1*:   29:  ck_assert_int_eq(s21_pow(base, exp), pow(base, exp));
        1:   30:}
        -:   31:END_TEST;
        -:   32:
        1:   33:START_TEST(powTest5) {
        1:   34:  double base = 0;
        1:   35:  double exp = 0;
        -:   36:
       1*:   37:  ck_assert_double_eq(s21_pow(base, exp), pow(base, exp));
        1:   38:}
        -:   39:END_TEST;
        -:   40:
        1:   41:START_TEST(powTest6) {
        1:   42:  double base = 525;
        1:   43:  double exp = -12;
       1*:   44:  ck_assert_double_eq_tol(s21_pow(base, exp), pow(base, exp), 0.000001);
        1:   45:}
        -:   46:END_TEST;
        -:   47:
        1:   48:START_TEST(powTest7) {
        1:   49:  double base = 525;
        1:   50:  double exp = NAN;
       1*:   51:  ck_assert_double_nan(s21_pow(base, exp));
       1*:   52:  ck_assert_double_nan(pow(base, exp));
        1:   53:}
        -:   54:END_TEST;
        -:   55:
        1:   56:START_TEST(powTest8) {
       1*:   57:  ck_assert(S21_IS_NAN(s21_pow(5.5, NAN)) == S21_IS_NAN(pow(5.5, NAN)));
       1*:   58:  ck_assert(S21_IS_NAN(s21_pow(5, INFINITY)) == S21_IS_NAN(pow(5, INFINITY)));
       1*:   59:  ck_assert(S21_IS_NAN(s21_pow(-5, -1)) == S21_IS_NAN(pow(-5, -1)));
       1*:   60:  ck_assert(S21_IS_NAN(s21_pow(INFINITY, 1)) == S21_IS_NAN(pow(INFINITY, 1)));
       1*:   61:  ck_assert(S21_IS_NAN(s21_pow(INFINITY, 0)) == S21_IS_NAN(pow(INFINITY, 0)));
       1*:   62:  ck_assert(S21_IS_NAN(s21_pow(INFINITY, INFINITY)) ==
        -:   63:            S21_IS_NAN(pow(INFINITY, INFINITY)));
       1*:   64:  ck_assert(S21_IS_NAN(s21_pow(INFINITY, NAN)) ==
        -:   65:            S21_IS_NAN(pow(INFINITY, NAN)));
       1*:   66:  ck_assert(S21_IS_NAN(s21_pow(5.2, INFINITY)) ==
        -:   67:            S21_IS_NAN(pow(5.2, INFINITY)));
       1*:   68:  ck_assert(S21_IS_NAN(s21_pow(5.2, -INFINITY)) ==
        -:   69:            S21_IS_NAN(pow(5.2, -INFINITY)));
       1*:   70:  ck_assert(S21_IS_NAN(s21_pow(-1, INFINITY)) == S21_IS_NAN(pow(-1, INFINITY)));
       1*:   71:  ck_assert(S21_IS_NAN(s21_pow(0, -3)) == S21_IS_NAN(pow(0, -3)));
       1*:   72:  ck_assert(S21_IS_NAN(s21_pow(0, -INFINITY)) == S21_IS_NAN(pow(0, -INFINITY)));
       1*:   73:  ck_assert(S21_IS_NAN(s21_pow(0, -NAN)) == S21_IS_NAN(pow(0, -NAN)));
       1*:   74:  ck_assert(S21_IS_NAN(s21_pow(-INFINITY, 0)) == S21_IS_NAN(pow(-INFINITY, 0)));
       1*:   75:  ck_assert(S21_IS_NAN(s21_pow(-INFINITY, 1)) == S21_IS_NAN(pow(-INFINITY, 1)));
       1*:   76:  ck_assert(S21_IS_NAN(s21_pow(-INFINITY, INFINITY)) ==
        -:   77:            S21_IS_NAN(pow(-INFINITY, INFINITY)));
       1*:   78:  ck_assert(S21_IS_NAN(s21_pow(-INFINITY, NAN)) ==
        -:   79:            S21_IS_NAN(pow(-INFINITY, NAN)));
       1*:   80:  ck_assert(S21_IS_NAN(s21_pow(-3, NAN)) == S21_IS_NAN(pow(-3, NAN)));
        1:   81:}
        -:   82:END_TEST;
        -:   83:
       36:   84:Suite *powTest(void) {
       36:   85:  Suite *s = suite_create("\033[45mPow test\033[0m");
       36:   86:  TCase *tc = tcase_create("Pow test");
        -:   87:
       36:   88:  tcase_add_test(tc, powTest1);
       36:   89:  tcase_add_test(tc, powTest2);
       36:   90:  tcase_add_test(tc, powTest3);
       36:   91:  tcase_add_test(tc, powTest4);
       36:   92:  tcase_add_test(tc, powTest5);
       36:   93:  tcase_add_test(tc, powTest6);
       36:   94:  tcase_add_test(tc, powTest7);
       36:   95:  tcase_add_test(tc, powTest8);
        -:   96:
       36:   97:  suite_add_tcase(s, tc);
       36:   98:  return s;
        -:   99:}
